import { Injectable } from '@angular/core';
import { ApiService } from './api.service';
import { Observable, BehaviorSubject, of, throwError } from 'rxjs';
import { tap, catchError } from 'rxjs/operators';

export interface User {
  id: number;
  name: string;
  lastname: string;
  mail: string;
  birthday?: Date;
  createAt?: Date;
  profileImage?: string;
  phone?: string;
  joinDate?: Date;
}

export interface LoginDto {
  mail: string;
  password: string;
}

export interface RegisterDto {
  mail: string;
  name: string;
  lastname: string;
  birthdate: string;
  password: string;
}

export interface TokenDto {
  token: string;
}

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private currentUserSubject = new BehaviorSubject<User | null>(null);
  public currentUser$ = this.currentUserSubject.asObservable();

  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);
  public isAuthenticated$ = this.isAuthenticatedSubject.asObservable();

  constructor(private apiService: ApiService) {
    // Check if user is already logged in (token exists)
    this.checkAuthState();
  }

  /**
   * Check if user is already authenticated
   */
  private checkAuthState(): void {
    const token = localStorage.getItem('auth_token');
    const userJson = localStorage.getItem('current_user');

    if (token && userJson) {
      try {
        const user = JSON.parse(userJson);
        this.currentUserSubject.next(user);
        this.isAuthenticatedSubject.next(true);
      } catch (e) {
        // Invalid user data in localStorage
        this.logout();
      }
    }
  }

  /**
   * Log in the user
   */
  login(credentials: LoginDto): Observable<User> {
    return this.apiService.post<TokenDto>('/auth/login', credentials)
      .pipe(
        tap(response => {
          // Store the token
          localStorage.setItem('auth_token', response.token);

          // Get user information from the token (in a real app, you might need to fetch user data)
          return this.fetchCurrentUser();
        }),
        catchError(err => {
          return throwError(() => new Error(err.error?.message || 'Error al iniciar sesi√≥n'));
        })
      );
  }

  /**
   * Register a new user
   */
  register(userData: RegisterDto): Observable<User> {
    return this.apiService.post<TokenDto>('/auth/register', userData)
      .pipe(
        tap(response => {
          // Store the token
          localStorage.setItem('auth_token', response.token);

          // Get user information
          return this.fetchCurrentUser();
        }),
        catchError(err => {
          return throwError(() => new Error(err.error?.message || 'Error al registrar usuario'));
        })
      );
  }

  /**
   * Fetch current user data
   */
  fetchCurrentUser(): Observable<User> {
    return this.apiService.get<User>('/user/getByMail/{mail}')
      .pipe(
        tap(user => {
          // Store user data
          localStorage.setItem('current_user', JSON.stringify(user));
          this.currentUserSubject.next(user);
          this.isAuthenticatedSubject.next(true);
          return user;
        }),
        catchError(err => {
          this.logout();
          return throwError(() => new Error('Error al obtener datos del usuario'));
        })
      );
  }

  /**
   * Log out the user
   */
  logout(): void {
    // Remove user data from local storage
    localStorage.removeItem('auth_token');
    localStorage.removeItem('current_user');

    // Update observables
    this.currentUserSubject.next(null);
    this.isAuthenticatedSubject.next(false);
  }

  /**
   * Get the current user
   */
  getCurrentUser(): User | null {
    return this.currentUserSubject.value;
  }

  /**
   * Check if the user is authenticated
   */
  isAuthenticated(): boolean {
    return this.isAuthenticatedSubject.value;
  }
}
